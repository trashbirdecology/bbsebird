[{"path":[]},{"path":"https://trashbirdecology.github.io/bbsebird/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/articles/make-data.html","id":"create-a-spatial-sampling-grid","dir":"Articles","previous_headings":"","what":"Create a spatial sampling grid","title":"make-data","text":"following chunk creates spatial sampling grid size grid.size units defaulting units crs.target.","code":"study_area <- make_spatial_grid(                           dir.out = dirs[['dir.spatial.out']],                           states = states,                           countries = countries,                           crs.target = crs.target,                           grid.size = grid.size,                            hexagonal = FALSE,                           adjacency.mat = \"euclid\",                           overwrite = FALSE                           ) if(is.list(study_area)){    neighborhood <- study_area$neighborhood   study_area <- study_area$grid   overlay      <- study_area$overlay } # plot(study_area)"},{"path":"https://trashbirdecology.github.io/bbsebird/articles/make-data.html","id":"create-bbs-data","dir":"Articles","previous_headings":"","what":"Create BBS Data","title":"make-data","text":"Create BBS data. chunk relieson R package /code{bbsAssistant}. resulting data aligned spatial grid (see ).","code":"## if the files already exist, don't overwrite unless you've made changes to data specs if(\"bbs_obs.rds\" %in% list.files(dirs$dir.bbs.out)){bbs_obs <- readRDS(list.files(dirs$dir.bbs.out, \"bbs_obs.rds\", full.names=TRUE))}else{ bbs_orig <- bbsAssistant::grab_bbs_data(bbs_dir = dirs$dir.bbs.out)  bbs_obs  <- bbsAssistant::munge_bbs_data(     bbs_list = bbs_orig,     states   = states,     species = species,      year.range = year.range) bbs_obs <- bbsebird:::match_col_names(bbs_obs) # munge column names to mesh with eBird saveRDS(bbs_obs, paste0(dirs$dir.bbs.out, \"/bbs_obs.rds\")) # suggest saving data to file for easy access } # Overlay BBS and study area / sampling grid ### note, sometimes when running this in a notebook/rmd a random .rdf\" path error occurs. #### I have no clue what this bug is. Just try running it again. See also https://github.com/rstudio/rstudio/issues/6260 if(\"bbs_spatial.rds\" %in% list.files(dirs$dir.bbs.out)){bbs_spatial <- readRDS(list.files(dirs$dir.bbs.out, \"bbs_spatial.rds\", full.names=TRUE))}else{ bbs_spatial <- make_bbs_spatial(   df = bbs_obs,   cws.routes.dir = dirs$cws.routes.dir,   usgs.routes.dir = dirs$usgs.routes.dir,   # plot.dir = dirs$dir.plots,   crs.target = crs.target,   grid = study_area,   dir.out = dirs$dir.spatial.out,    overwrite = FALSE ) saveRDS(bbs_spatial, paste0(dirs$dir.bbs.out, \"/bbs_spatial.rds\")) } ## check out the bbs spatial data to ensure things look ok # plot(bbs_spatial['area']) # cell area"},{"path":"https://trashbirdecology.github.io/bbsebird/articles/make-data.html","id":"create-ebird-data","dir":"Articles","previous_headings":"","what":"Create eBird Data","title":"make-data","text":"","code":"## check the specified ebird original data directory for files.  (fns.ebird    <- id_ebird_files(   dir.ebird.in = dirs$dir.ebird.in,   dir.ebird.out = dirs$dir.ebird.out,   mmyyyy = mmyyyy,   species = species.abbr,   states.ind = states )) stopifnot(length(fns.ebird) > 1)  # Import and munge the desired files ebird <- munge_ebird_data(   fns.ebird = fns.ebird,   species = c(species, species.abbr),   dir.ebird.out = dirs$dir.ebird.out,   countries = countries,   states = states,   overwrite = FALSE, ## this function checks for existing, munged files iin dir.ebird.out..   years = year.range )  # Create spatial ebird ebird_spatial <- make_ebird_spatial(   df = ebird,   crs.target = crs.target,   grid = study_area,   overwrite = TRUE, # this fun checks for existing spatial ebird file in dir.spatial.out   dir.out = dirs$dir.spatial.out  ) ## visualizing the ebird_spatial data takes a while, do not recommend."},{"path":"https://trashbirdecology.github.io/bbsebird/articles/make-data.html","id":"bundle-data-for-modeling","dir":"Articles","previous_headings":"","what":"Bundle Data for Modeling","title":"make-data","text":"Create list lists indexes use JAGS elsewhere. suggest creating list using make_bundle subsequently grabbing useful data . make_bundle creates site-level covariates long (vector) wide (matrix) form. Matrix form housed inside Xsite matrix, whereas long-form within list elements ‘bbs.df’ ‘ebird.df’. Note, however, Xsite matrices include missing covariate data.","code":"message(\"[note] sometimes when running this chunk in notebook/rmarkdown it crashes. try restarting session or running interactively/n\") ### make a teeny little bundle for model dev/debugging bundle.dev <- make_bundle(   bbs = bbs_spatial,   ebird = ebird_spatial,   grid = study_area,   dev.mode = TRUE ) ## recommend saving to file in case you have crashes due to memory or modeling saveRDS(bundle.dev, paste0(dirs$dir.proj,\"/dev-bundle.rds\"))  ### make full sized bundle bundle <- make_bundle(   # data   bbs = bbs_spatial,   ebird = ebird_spatial,   grid = study_area,   # optional args   dev.mode = FALSE ) saveRDS(bundle, paste0(dirs$dir.proj,\"/bundle.rds\"))   # dir.copy <- \"C:/Users/jburnett/DOI/Royle, Andy - aaaaa/\" # saveRDS(overlay, paste0(dirs$dir.proj,\"/overlay.rds\")) # saveRDS(neighborhood, paste0(dirs$dir.proj,\"/neighborhood.rds\")) # file.copy(paste0(dirs$dir.proj,\"/bundle.rds\"), dir.copy) # file.copy(paste0(dirs$dir.proj,\"/overlay.rds\"), dir.copy) # file.copy(paste0(dirs$dir.proj,\"/dev-bundle.rds\"), dir.copy) # file.copy(paste0(dirs$dir.proj,\"/overlay.rds\"), dir.copy) # file.copy(paste0(dirs$dir.proj,\"/neighborhood.rds\"), dir.copy)"},{"path":"https://trashbirdecology.github.io/bbsebird/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jessica Burnett. Author, maintainer. Paige Howell. Contributor. Andy Royle. Contributor.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burnett J (2022). bbsebird: Unifying BBS eBird Data Modelers. R package version 0.0.0.9000, https://trashbirdecology.github.io/bbsebird/.","code":"@Manual{,   title = {bbsebird: Unifying BBS and eBird Data for Modelers},   author = {Jessica Burnett},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://trashbirdecology.github.io/bbsebird/}, }"},{"path":"https://trashbirdecology.github.io/bbsebird/index.html","id":"bbsebird","dir":"","previous_headings":"","what":"Unifying BBS and eBird Data for Modelers","title":"Unifying BBS and eBird Data for Modelers","text":"purpose R package (likely undergo name change…) : provide (currently) faster alternative R package auk importing munging large eBird datasets*. integrate BBS eBird observation datasets use hierarchical modeling efforts assigning point-referenced data gridded surface. provide modeling workflow analysing spatio-temporal dynamics Nimble JAGS. *@cboettig @amstrimas currently developing auk alternative, birddb. likely , stable, R package use birddb dependency eBird import manipulation. now, however, functions herein provide much faster alternative auk.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Unifying BBS and eBird Data for Modelers","text":"Download development version GitHub :","code":"# install.packages(\"devtools\") # remotes::install_github(\"trashbirdecology/bbsassistant\") # to be safe remotes::install_github(\"trashbirdecology/bbsebird\")"},{"path":"https://trashbirdecology.github.io/bbsebird/index.html","id":"ebird-data-requirements","dir":"","previous_headings":"","what":"eBird Data Requirements","title":"Unifying BBS and eBird Data for Modelers","text":"Prior using package, must downloaded eBird data. request download eBird observations, visit eBird website. Credentials required, may take business days approval, depending use case. information eBird data see eBird website, visit repository Cornell Lab Ornithology’s offical R package munging eBird data, auk. account approved, gain access eBird Basic Database (EBD). package requires two components EBD saved local file: observations (.e. counts) sampling events (.e. information observation process)","code":""},{"path":[]},{"path":"https://trashbirdecology.github.io/bbsebird/index.html","id":"step-1-setup","dir":"","previous_headings":"","what":"Step 1: Setup","title":"Unifying BBS and eBird Data for Modelers","text":"using README, RMD chunk shoudl edit. important eBird data BBS shapefiles stored (dir.orig.data) wish save resulting data/models (dir.proj). latter need exist – exist package create directory . chunk create new environmental variables project data directories based project directory data directory specified .","code":"#explicitly load some packages pkgs <- c(\"bbsebird\") # install.packages(\"mapview\") # you can use thsi package to get interactive map views.. invisible(lapply(pkgs, library, character.only = TRUE)) rm(pkgs) # REQUIRED ARGUMENTS dir.orig.data  = \"C:/Users/jburnett/OneDrive - DOI/bbsebird-testing/\" # this will be improved to be more intuitive re: what data?  dir.proj       = \"C:/users/jburnett/OneDrive - DOI/bbsebird-testing/House_Sparrow/\" species             = c(\"House Sparrow\") ## eventually need to add alookup table to ensure species.abbr and speices align. species.abbr        = c(\"houspa\") # see ebird filename for abbreviation ### this needs improvement as well...e.g. a species lookup table to link common-speci-abbrev across BBS and eBird data... ##bbs arguments usgs.layer          = \"US_BBS_Route-Paths-Snapshot_Taken-Feb-2020\" # name of the USGS BBS route shapefile to use cws.layer           = \"ALL_ROUTES\" # name of the Canadian (CWS) BBS route shapefile. ##ebird arguments mmyyyy              = \"dec-2021\" # the month and year of the eBird data downloads on file  # Strongly suggested but optional args ##general arguments # dir.proj  = \"C:/Users/jburnett/desktop/testing/\"   ### see bbsAssistant::region_codes states              = c(\"us-fl\", \"us-ga\", \"us-al\") countries           = c(\"US\") ## string of  countries Call \\code{bbsebird::iso.codes} to find relevant codes for Countries and States/Prov/Territories. # species             = c(\"Double-crested Cormorant\", \"Nannopterum auritum\", \"phalacrocorax auritum\") # species.abbr        = c(\"doccor\",\"dcco\", \"docco\")  year.range          = 2008:2019 base.julian.date    = lubridate::ymd(paste0(min(year.range), c(\"-01-01\"))) # used as base date for Julian dates. crs.target          = 4326 #target CRS for all created spatial layers ##grid arguments grid.size           = 1.00 # size in decimal degrees (for US/CAN a good est is 1.00dec deg == 111.11km)  ##ebird arguments min.yday            = 91 max.yday            = 245  ## Munge the states and countries indexes for use in dir/proj dir reation if(!exists(\"states\")) states <- NULL if(!is.null(states)){regions <- states}else{regions <- countries} stopifnot(all(tolower(states) %in% tolower(bbsAssistant::region_codes$iso_3166_2))) # set_proj_shorthand: this will make all directories within a new dir in dir.proj. this is useful for iterating over species/time/space and saving all resulting information in those directories. subdir.proj <-  set_proj_shorthand(species.abbr, regions, grid.size, year.range) dirs        <-  dir_spec(dir.orig.data = dir.orig.data,                            dir.proj = dir.proj,                          subdir.proj = subdir.proj) # create and/or specify"},{"path":[]},{"path":"https://trashbirdecology.github.io/bbsebird/index.html","id":"create-a-spatial-sampling-grid","dir":"","previous_headings":"Step 2: Make Integrated Data","what":"Create a spatial sampling grid","title":"Unifying BBS and eBird Data for Modelers","text":"following chunk creates spatial sampling grid size grid.size units defaulting units crs.target. Create BBS data. chunk relieson R package . resulting data aligned spatial grid (see ). Munge eBird data (must saved file):","code":"study_area <- make_spatial_grid(                           dir.out = dirs[['dir.spatial.out']],                           states = states,                           countries = countries,                           crs.target = crs.target,                           grid.size = grid.size,                            hexagonal = TRUE,                           overwrite = TRUE                           ) if(is.list(study_area)){    grid          <- study_area$grid   overlay       <- study_area$grid.overlay } plot(grid) plot(overlay) rm(study_area) ## if the files already exist, don't overwrite unless you've made changes to data specs if(\"bbs_obs.rds\" %in% list.files(dirs$dir.bbs.out)){bbs_obs <- readRDS(list.files(dirs$dir.bbs.out, \"bbs_obs.rds\", full.names=TRUE))}else{ bbs_orig <- bbsAssistant::grab_bbs_data(bbs_dir = dirs$dir.bbs.out)  bbs_obs  <- bbsAssistant::munge_bbs_data(     bbs_list = bbs_orig,     states   = states,     species = species,      year.range = year.range) bbs_obs <- bbsebird:::match_col_names(bbs_obs) # munge column names to mesh with eBird saveRDS(bbs_obs, paste0(dirs$dir.bbs.out, \"/bbs_obs.rds\")) # suggest saving data to file for easy access } # Overlay BBS and study area / sampling grid ### note, sometimes when running this in a notebook/rmd a random .rdf\" path error occurs. #### I have no clue what this bug is. Just try running it again. See also https://github.com/rstudio/rstudio/issues/6260 if(\"bbs_spatial.rds\" %in% list.files(dirs$dir.bbs.out)){bbs_spatial <- readRDS(list.files(dirs$dir.bbs.out, \"bbs_spatial.rds\", full.names=TRUE))}else{ bbs_spatial <- make_bbs_spatial(   df = bbs_obs,   overwrite=TRUE,    cws.routes.dir = dirs$cws.routes.dir,   usgs.routes.dir = dirs$usgs.routes.dir,   plot.dir = dirs$dir.plots,   crs.target = crs.target,   grid = study_area,   dir.out = dirs$dir.spatial.out ) saveRDS(bbs_spatial, paste0(dirs$dir.bbs.out, \"/bbs_spatial.rds\")) } ## check out the bbs spatial data to ensure things look ok # plot(bbs_spatial['area']) # cell area ## check the specified ebird original data directory for files.  (fns.ebird    <- id_ebird_files(   dir.ebird.in = dirs$dir.ebird.in,   dir.ebird.out = dirs$dir.ebird.out,   mmyyyy = mmyyyy,   species = species.abbr,   states.ind = states )) stopifnot(length(fns.ebird) > 1)  # Import and munge the desired files ebird <- munge_ebird_data(   fns.ebird = fns.ebird,   species = c(species, species.abbr),   dir.ebird.out = dirs$dir.ebird.out,   countries = countries,   states = states,   # overwrite = FALSE, ## this function checks for existing, munged files iin dir.ebird.out..   years = year.range )  # Create spatial ebird ebird_spatial <- make_ebird_spatial(   df = ebird,   crs.target = crs.target,   grid = ifelse(is.list(study_area), study_area[[1]], study_area),   overwrite = FALSE, # this fun checks for existing spatial ebird file in dir.spatial.out   dir.out = dirs$dir.spatial.out  ) ## visualizing the ebird_spatial data takes a while, do not recommend."},{"path":"https://trashbirdecology.github.io/bbsebird/index.html","id":"step-3-bundle-data-for-use-in-bugs","dir":"","previous_headings":"","what":"Step 3: Bundle Data for Use in BUGS","title":"Unifying BBS and eBird Data for Modelers","text":"Create list lists indexes use JAGS elsewhere. suggest creating list using make_bundle subsequently grabbing useful data . make_bundle creates site-level covariates long (vector) wide (matrix) form. Matrix form housed inside Xsite matrix, whereas long-form within bbs.df ebird.df. –>  –>  –> –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –> –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –> –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –> –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –>  –> –>  –>  –>  –>  –>","code":"message(\"[note] sometimes when running this chunk in notebook/rmarkdown it crashes. try restarting session or running interactively\\n\")  ### make a teeny little bundle for model dev/debugging bundle.dev <- make_bundle(   bbs = bbs_spatial,   ebird = ebird_spatial,   grid = study_area,   dev.mode = TRUE ) ## recommend saving to file in case you have crashes due to memory or modeling saveRDS(bundle.dev, paste0(dirs$dir.proj,\"/dev-bundle.rds\"))  ### make full sized bundle bundle <- make_bundle(   # data   bbs = bbs_spatial,   ebird = ebird_spatial,   grid = study_area,   # optional args   dev.mode = FALSE ) saveRDS(bundle, paste0(dirs$dir.proj,\"/bundle.rds\"))  # ### or read in from file... # (bundle.fns <- list.files(paste0(dirs$dir.proj), pattern=\"bundle.rds\", full.names = TRUE)) # bundle <- readRDS(bundle.fns[1])"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/bbsebird.html","id":null,"dir":"Reference","previous_headings":"","what":"bbsebird: Unifying BBS and eBird Data for Modelers — bbsebird","title":"bbsebird: Unifying BBS and eBird Data for Modelers — bbsebird","text":"Imports, munges aligns eBird BBS data spatial sampling grid user's select size. Additionally, produces bundles data use JAGS, Nimble STAN runs select BUGS models parallel JAGS Nimble via R.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/bbsebird.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bbsebird: Unifying BBS and eBird Data for Modelers — bbsebird","text":"Maintainer: Jessica Burnett jburnett@usgs.gov (ORCID) contributors: Paige Howell (ORCID) [contributor] Andy Royle (ORCID) [contributor]","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/dir_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify Input/Output Directories For Project — dir_spec","title":"Specify Input/Output Directories For Project — dir_spec","text":"Produces list comprising directories munged data, JAGS data lists, figures, model outputs. used list2env() assign directories desired environment (typically .GlobalEnv)","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/dir_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify Input/Output Directories For Project — dir_spec","text":"","code":"dir_spec(dir.orig.data, dir.proj = NULL, subdir.proj = NULL)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/dir_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify Input/Output Directories For Project — dir_spec","text":"dir.orig.data Location original BBS eBird data. directory house multiple directories, including BBS route shapefiles, eBird database. dir.proj Project directory. Assumes current working directory. directories output files stored. subdir.proj name subdirectory exist within dir.proj. Can quickly created outside function using dubcorms::set_proj_shorthand()","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/eval_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Spruce up R Markdown YAML parameter values that are lists into clean vectors. Called for convenience inside .RMD files. — eval_params","title":"Spruce up R Markdown YAML parameter values that are lists into clean vectors. Called for convenience inside .RMD files. — eval_params","text":"Spruce R Markdown YAML parameter values lists clean vectors. Called convenience inside .RMD files.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/eval_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spruce up R Markdown YAML parameter values that are lists into clean vectors. Called for convenience inside .RMD files. — eval_params","text":"","code":"eval_params(x = params)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/eval_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spruce up R Markdown YAML parameter values that are lists into clean vectors. Called for convenience inside .RMD files. — eval_params","text":"x parameter object YAML params","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/find_UTM_zone.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for converting longitude and latitude to UTM zones and coordinates. — find_UTM_zone","title":"Functions for converting longitude and latitude to UTM zones and coordinates. — find_UTM_zone","text":"Functions converting longitude latitude UTM zones coordinates.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/find_UTM_zone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for converting longitude and latitude to UTM zones and coordinates. — find_UTM_zone","text":"","code":"find_UTM_zone(longitude, latitude)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/find_UTM_zone.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Functions for converting longitude and latitude to UTM zones and coordinates. — find_UTM_zone","text":"https://stackoverflow.com/questions/18639967/converting-latitude--longitude-points--utm","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/find_UTM_zone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for converting longitude and latitude to UTM zones and coordinates. — find_UTM_zone","text":"longitude vector X coordinate(s) latitude vector Y coordinate(s)","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/id_ebird_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and Decompress Relevant eBird Files for Downstream Importing and Munging — id_ebird_files","title":"Identify and Decompress Relevant eBird Files for Downstream Importing and Munging — id_ebird_files","text":"Identify Decompress Relevant eBird Files Downstream Importing Munging","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/id_ebird_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and Decompress Relevant eBird Files for Downstream Importing and Munging — id_ebird_files","text":"","code":"id_ebird_files(   dir.ebird.in,   dir.ebird.out = NULL,   mmyyyy = \"nov-2021\",   species.abbr = \"doccor\",   get.full.data = FALSE,   states.ind = NULL )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/id_ebird_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and Decompress Relevant eBird Files for Downstream Importing and Munging — id_ebird_files","text":"dir.ebird.Directory ebird data stored. dir.ebird.Location search existing, created .rds files mmyyyy month (mm) year (yyyy) ebird dataset wish use. Suggested use recent file. species.abbr Character vector comprising species identifiers filenames. get.full.data Logical TRUE retrieve filenames ENTIRE database, thereby ignoring species e.regions states.ind one two-letter state codes","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/import_jdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Import the Prepared RDS Data For Use in JAGS — import_jdat","title":"Import the Prepared RDS Data For Use in JAGS — import_jdat","text":"Import Prepared RDS Data Use JAGS","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/import_jdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import the Prepared RDS Data For Use in JAGS — import_jdat","text":"","code":"import_jdat(dir.jags, filename = \"jdat.rds\")"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/import_jdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import the Prepared RDS Data For Use in JAGS — import_jdat","text":"dir.jags Path name jags data files (.rds) stored filename Name file import.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/longlat_to_UTM.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert long, lat Locations to UTM coordinates and zones\nReturns a data frame containing the UTM values, the zone and the hemisphere associated with long lat coordinates. — longlat_to_UTM","title":"Convert long, lat Locations to UTM coordinates and zones\nReturns a data frame containing the UTM values, the zone and the hemisphere associated with long lat coordinates. — longlat_to_UTM","text":"Convert long, lat Locations UTM coordinates zones Returns data frame containing UTM values, zone hemisphere associated long lat coordinates.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/longlat_to_UTM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert long, lat Locations to UTM coordinates and zones\nReturns a data frame containing the UTM values, the zone and the hemisphere associated with long lat coordinates. — longlat_to_UTM","text":"","code":"longlat_to_UTM(long, lat, units = \"m\")"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/longlat_to_UTM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert long, lat Locations to UTM coordinates and zones\nReturns a data frame containing the UTM values, the zone and the hemisphere associated with long lat coordinates. — longlat_to_UTM","text":"long vector X coordinates lat vector Y coordinates units one c('m', 'km') returns UTM coordinates meters kilometers, respectively.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast Data to Array or Matrix for Use in JAGS — make_array","title":"Cast Data to Array or Matrix for Use in JAGS — make_array","text":"Cast Data Array Matrix Use JAGS","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast Data to Array or Matrix for Use in JAGS — make_array","text":"","code":"make_array(   df = bbs,   val,   row = c(\"rteno\", \"checklist_id\"),   col = \"year\",   slice = \"gridcellid\",   drop.na.rows = FALSE )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast Data to Array or Matrix for Use in JAGS — make_array","text":"df Data frame three columns val target value populate matrix array matrices row target rownames col target colnames slice target slice-values drop.na.rows logical TRUE drop values arg \"val\" NA.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_bbs_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulate the BBS route shapefiles — make_bbs_spatial","title":"Manipulate the BBS route shapefiles — make_bbs_spatial","text":"function meant intake two shapefiles, one per cws usgs munges conform USGS data release BBS observations route metadata.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_bbs_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulate the BBS route shapefiles — make_bbs_spatial","text":"","code":"make_bbs_spatial(   df,   grid,   cws.routes.dir,   usgs.routes.dir,   cws.layer = \"ALL_ROUTES\",   usgs.layer = \"US_BBS_Route-Paths-Snapshot_Taken-Feb-2020\",   crs.target = 4326,   ncores = parallel::detectCores() - 1,   print.plots = TRUE,   keep.empty.cells = TRUE,   plot.dir = NULL,   overwrite = FALSE,   dir.out = NULL,   save.route.lines = TRUE )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_bbs_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manipulate the BBS route shapefiles — make_bbs_spatial","text":"df data frame columns c(latitude, longitude) optional attributes (columns). grid spatial grid eBird data overlaid. cws.routes.dir Directory CWS (Canadian BBS) shapefiles stored. usgs.routes.dir Directory USGS (USA BBS) shapefiles stored. cws.layer Name layer import. Defaults \"ALL_ROUTES\" usgs.layer Name layer import. crs.target integer representing target CRS. ncores max number cores engage parallel data processing. Defaults one fewer CPUs machine . Parallel processing used high number routes /grid cells data. print.plots logical TRUE print exploratory figures device keep.empty.cells logical FALSE remove grid cells BBS data align. recommend . plot.dir Directory path save resulting exploratory pdf (print.plots==TRUE) overwrite logical TRUE overwrite existing file named \"ebird_spatial.rds\" path dir.dir.path resulting spatial data frame saved. NULL save file. save.route.lines logical. TRUE (default) save BBS routes segments .RDS dir.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_bundle.html","id":null,"dir":"Reference","previous_headings":"","what":"Bundle Data for Use in JAGS — make_bundle","title":"Bundle Data for Use in JAGS — make_bundle","text":"Bundle Data Use JAGS","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_bundle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bundle Data for Use in JAGS — make_bundle","text":"","code":"make_bundle(   bbs,   ebird,   grid,   drop.na.cov.obs = TRUE,   mins.to.hours = TRUE,   scale.covs = TRUE,   fill.cov.nas = NA,   use.ebird.in.EN = TRUE,   EN.arg = \"max\",   X = \"cell.lon.centroid\",   Y = \"cell.lat.centroid\",   cell.id = \"gridcellid\",   year.id = \"year\",   site.id = c(\"checklist_id\", \"rteno\"),   obs.id = c(\"obsn\", \"observer_id\"),   cell.covs = c(\"area\"),   site.covs = c(\"starttime\", \"endtime\", \"wind\", \"noise\", \"cars\", \"minute\", \"assistant\",     \"obsfirstyearbbs\", \"obsfirstyearonbbs\", \"obsfirstyearroute\", \"obsfirstyearonroute\",     \"time_observations_started_hsm\", \"time_observations_started\", \"duration_minutes\",     \"protocol_type\", \"number_observers\"),   dev.mode = FALSE,   dir.outputs = \"outputs\",   save.neighborhood = TRUE )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_bundle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bundle Data for Use in JAGS — make_bundle","text":"bbs BBS data table ebird eBird data table grid spatial sampling grid/study area table drop.na.cov.obs logical TRUE remove data specified covariate exist. TRUE, suggest examining data covariates prior specifying site.covs grid.covs. mins..hours logical TRUE convert covariates minute scale hour scale. scale.covs logical TRUE automatically scale numeric/integer covariates. fill.cov.nas value fill missing covariate values. User can specify value FALSE fill requested. use.ebird..EN logical TRUE use data across eBird BBS observations create basis functions. EN.arg \"max\" use maximum value observed birds grid cell produce matrix expected number birds grid cell level. Alternatives include \"min\", \"mean\". X variable name associated x-coordinate (e.g., long, longitude, Easting, X) across 'grid', 'bbs', 'ebird' Y variable name associated x-coordinate (e.g., latitude, Northing, Y) across 'grid', 'bbs', 'ebird' cell.id column name(s) grid cell identifier year.id column name temporal identifier site.id column name(s) site  identifier (e.g., BBS route, eBird checklists) obs.id column name(s) observer identifier cell.covs column name(s) grid-level covariates site.covs column name(s) site-level covariates dev.mode logical TRUE return reduced data set use development/debugging purposes. method reduces number time units 2, maximum number grid cells 10, 2 sites data source dir.outputs directory location save JAGAM.bugs model file created mgcv::jagam(). Defaults ./models/ save.neighborhood logical TRUE save neighborhood network file \"neighborhood.rds\" 'dir.outputs'.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_ebird_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an SF object for eBird Observations — make_ebird_spatial","title":"Create an SF object for eBird Observations — make_ebird_spatial","text":"Converts eBird (preferably zero-filled data) simple features spatial object.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_ebird_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an SF object for eBird Observations — make_ebird_spatial","text":"","code":"make_ebird_spatial(   df,   crs.target,   dir.out = NULL,   grid = NULL,   overwrite = FALSE )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_ebird_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an SF object for eBird Observations — make_ebird_spatial","text":"df data frame columns c(latitude, longitude) optional attributes (columns). crs.target integer representing target CRS. dir.path resulting spatial data frame saved. NULL save file. grid spatial grid eBird data overlaid. overwrite logical TRUE overwrite existing file named \"ebird_spatial.rds\" path dir.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Generating Basis Functions — make_gam","title":"Function for Generating Basis Functions — make_gam","text":"Function Generating Basis Functions","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Generating Basis Functions — make_gam","text":"","code":"make_gam(   coords,   method = \"cubic2d\",   nd = 20,   nruns = 10,   num.nn = 20,   ll.to.utm = TRUE,   print.plot = TRUE,   max.loop = 40,   K = NULL,   scale.coords = FALSE )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Generating Basis Functions — make_gam","text":"coords matrix data frame easting northing coordinates, respectively. First column easting (e.g., X, long) second northing. method one c(\"mgcv\", \"cubic2d\", \"strebel\") nd ... nruns ... num.nn ... ll..utm logical TRUE convert lat long coordinates UTMs prior creating distance-based basis functions. print.plot logical TRUE print spatial representation gam local device max.loop ... K max number basis functions produce mgcv::jagam() scale.coords logical TRUE scale XY coordinates XY matrix data frame comprising XY coordinates, first column X coordinate second Y.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_inits_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a List of Repeated Initial Values for each Chain — make_inits_list","title":"Create a List of Repeated Initial Values for each Chain — make_inits_list","text":"Create List Repeated Initial Values Chain","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_inits_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a List of Repeated Initial Values for each Chain — make_inits_list","text":"","code":"make_inits_list(inits, nc = 3)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_inits_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a List of Repeated Initial Values for each Chain — make_inits_list","text":"inits list initial values repeated according arg nc nc number chains (number times inits repeated)","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Make 2-D array (Matrix for JAGS) — make_mat","title":"Make 2-D array (Matrix for JAGS) — make_mat","text":"Make 2-D array (Matrix JAGS)","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make 2-D array (Matrix for JAGS) — make_mat","text":"","code":"make_mat(df.in, row = \"site.ind\", col = \"year.ind\", val, replace.na = FALSE)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make 2-D array (Matrix for JAGS) — make_mat","text":"df.Data frame row Variable df containing target row names col Variable df containing target column names val Variable containing target cell contents replace.na Whether replace NA values zero.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_spatial_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Spatial Sampling Grid — make_spatial_grid","title":"Create a Spatial Sampling Grid — make_spatial_grid","text":"Create Spatial Sampling Grid","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_spatial_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Spatial Sampling Grid — make_spatial_grid","text":"","code":"make_spatial_grid(   dir.out,   overwrite = TRUE,   countries = c(\"US\", \"CA\"),   states = NULL,   crs.target = 4326,   hexagonal = TRUE,   grid.size = 1,   ... )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/make_spatial_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Spatial Sampling Grid — make_spatial_grid","text":"dir.save resulting grid (.RDS). overwrite TRUE overwrite existing grid.rds dir.countries Vector countries. Defaults base map USA CAN, unless arg states provided. arg states provided, argument ignored. Must specified using ISO-A2 states Vector states spatial grid clipped. Must specified using ISO 3166-2 (see https://en.wikipedia.org/wiki/ISO_3166-2) crs.target Target CRS number spatial grid. hexagonal logical TRUE produce spatial grid hexagonal, opposed rectangular, cells grid.size numeric size (relative units defining crs.target) resulting cell. E.g., crs.target==4326 value gridsize=1.0 equals ~111.11km ... Additional arguments","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/match_col_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Munge eBird and BBS Column Names — match_col_names","title":"Munge eBird and BBS Column Names — match_col_names","text":"Munge names eBird BBS data frames ensure consistency.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/match_col_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Munge eBird and BBS Column Names — match_col_names","text":"","code":"match_col_names(x)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/match_col_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Munge eBird and BBS Column Names — match_col_names","text":"x data frame matrix eBird BBS observations. column names match function target, return object.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/munge_date_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Munge Dates and Times of the eBird and BBS Datasets — munge_date_time","title":"Munge Dates and Times of the eBird and BBS Datasets — munge_date_time","text":"Munge Dates Times eBird BBS Datasets Munge Dates Times eBird BBS Datasets","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/munge_date_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Munge Dates and Times of the eBird and BBS Datasets — munge_date_time","text":"","code":"munge_date_time(dat, base.date, min.yday = 0, max.yday = 365, sunlight = FALSE)  munge_date_time(dat, base.date, min.yday = 0, max.yday = 365, sunlight = FALSE)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/munge_date_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Munge Dates and Times of the eBird and BBS Datasets — munge_date_time","text":"dat data set least column date class \"date\" base.date character date string (YYYY-MM-DD) use origin date calculating Julian date. min.yday minimum day year include resulting dataset max.yday maximum day year include resulting dataset sunlight logical TRUE calculate sunlight, moonlight, rise set times. computationally demanding eBird data, set TRUE unless needed.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/munge_ebird_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and Write or Load In the Filtered eBird Data — munge_ebird_data","title":"Create and Write or Load In the Filtered eBird Data — munge_ebird_data","text":"Filter eBird data sampling events using R package AUK.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/munge_ebird_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and Write or Load In the Filtered eBird Data — munge_ebird_data","text":"","code":"munge_ebird_data(   fns.ebird,   dir.ebird.out,   overwrite = FALSE,   countries = NULL,   states = NULL,   complete.only = TRUE,   protocol = c(\"Traveling\", \"Stationary\"),   species = \"Double-crested Cormorant\",   remove.bbs.obs = TRUE,   years = NULL,   max.effort.km = NULL,   max.effort.mins = NULL,   max.num.observers = 10,   f_obs_out = paste0(dir.ebird.out, \"ebird_obs_filtered.txt\"),   f_samp_out = paste0(dir.ebird.out, \"ebird_samp_filtered.txt\") )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/munge_ebird_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and Write or Load In the Filtered eBird Data — munge_ebird_data","text":"fns.ebird File paths EBD SamplingEvents data import. Character vector filenames original files. dir.ebird.Location save /find filtered/subsetted eBird data. overwrite logical true overwrite existing filtered data objects directory 'dir.ebird.' countries Character vector country abbreviations filtering ebird data . states Character vector state/province abbreviations filtering ebird data . complete.logical TRUE remove incomplete checklists protocol eBird protocol include species species filtering eBird data remove.bbs.obs logical TRUE use crude untested method removing BBS data eBird data (see function details) years years include data max.effort.km maximum distance (kilometers) birding events include max.effort.mins maximum number minutes birding events include max.num.observers maximum number observers declared birding event include f_obs_out Filename saving filtered eBird observations data f_samp_out Filename saving filtered eBird sampling data","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/pluck_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Pluck Multiple Elements from List Object — pluck_multiple","title":"Pluck Multiple Elements from List Object — pluck_multiple","text":"Pluck Multiple Elements List Object","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/pluck_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pluck Multiple Elements from List Object — pluck_multiple","text":"","code":"pluck_multiple(x, keep = NULL, remove = NULL)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/pluck_multiple.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pluck Multiple Elements from List Object — pluck_multiple","text":"https://stackoverflow.com/questions/46983716/--multi-value-purrrpluck-exist","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/pluck_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pluck Multiple Elements from List Object — pluck_multiple","text":"x list object keep character integer vector one list element names numbers include list output remove character integer vector one list element names numbers remove list output","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/run_MCMC_allcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC in or Out of Parallel in nimble — run_MCMC_allcode","title":"Run MCMC in or Out of Parallel in nimble — run_MCMC_allcode","text":"Run MCMC Parallel nimble","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/run_MCMC_allcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC in or Out of Parallel in nimble — run_MCMC_allcode","text":"","code":"run_MCMC_allcode(   data,   model,   inits,   mcmc.specs,   verbose = FALSE,   seed = sample(1:1e+06, 1),   monitors = NULL,   ... )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/run_MCMC_allcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC in or Out of Parallel in nimble — run_MCMC_allcode","text":"data data constants list model filepath nimble model object inits list initial values mcmc.specs MCMC specifications list; created using set_mcmc_specs verbose logical TRUE code running parallel print output available Nimble commands. seed internal use monitors list parameters monitor ... Additional arguments","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/run_in_jags.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BUGS Model in JAGS — run_in_jags","title":"Run BUGS Model in JAGS — run_in_jags","text":"Run BUGS Model JAGS","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/run_in_jags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BUGS Model in JAGS — run_in_jags","text":"","code":"run_in_jags(   bugs.data,   model,   inits,   monitors,   savedir = \"/\",   seed = sample(1:111111, size = 1),   parallel = TRUE,   verbose = TRUE,   mod.name = \"myJAGSModel\",   overwrite = FALSE,   traceplots = TRUE,   mcmc.specs = set_mcmc_specs(),   ... )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/run_in_jags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BUGS Model in JAGS — run_in_jags","text":"bugs.data list List elements comprising constants data use JAGS model Filepath file containing JAGS model inits list List initial values. monitors optional Character vector parameters monitor. savedir specified, save samples resulting jagsUI::jags() current working directory seed optional specified set seed random number generation. parallel logical TRUE run parallel verbose logical Argument used jagsUI::jags(). TRUE generate messages/information sampling phase. Note: parallel=TRUE, messages suppressed given behavior parallel compute. mod.name optional Used save model output file. Defaults 'myJAGSModel' overwrite logical TRUE .RDS file already exists, prompt user menu confirm model re-run. Specifying overwrite=TRUE avoid prompt. traceplots logical TRUE attemp save default traceplot file mcmc.specs list List specs use MCMC specification (e.g., n.chains, n.adapt, n.cores). necessary values missing, use set_mcmc_specs grab default value. ... Additional arguments","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/run_in_nimble.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BUGS Model in nimble — run_in_nimble","title":"Run BUGS Model in nimble — run_in_nimble","text":"Run BUGS Model nimble","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/run_in_nimble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BUGS Model in nimble — run_in_nimble","text":"","code":"run_in_nimble(   myData,   myModel,   myInits = NULL,   traceplots = TRUE,   constants = NULL,   monitors = NULL,   savedir = \"outputs\",   seed = sample(1:111111, size = 1),   parallel = FALSE,   verbose = TRUE,   mod.name = \"mynimbleModel\",   mcmc.specs = set_mcmc_specs(dev.mode = FALSE),   ... )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/run_in_nimble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BUGS Model in nimble — run_in_nimble","text":"myData list List elements comprising data (constants provided separately) use nimble myModel nimbleCode object filepath BUGS model. myInits list List initial values. traceplots logical TRUE attempt print default traceplots model output constants optional Can provided separately myData. provided, function combine prior inclusion readNimbleModel monitors optional Character vector parameters monitor. savedir specified, save samples resulting nimbleUI::nimble() current working directory seed optional specified set seed random number generation. parallel logical TRUE run parallel verbose logical Argument used nimble::compileNimble(showCompilerOutput). TRUE generate messages/information sampling phase. Note: parallel=TRUE, messages suppressed given behavior parallel compute. mod.name optional Used save model output file. Defaults 'mynimbleModel' mcmc.specs list List specs use MCMC specification (e.g., n.chains, n.adapt, n.cores). necessary values missing, use set_mcmc_specs grab default value. ... Additional arguments","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/scan_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Check For Existing Files — scan_files","title":"Check For Existing Files — scan_files","text":"Checks existing files import avoid length data munging processes.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/scan_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check For Existing Files — scan_files","text":"","code":"scan_files(   dir.proj,   scan.for = c(\"jdat\", \"jags\", \"ebird_filtered\", \"bbs_obs\", \"grid\", \"bbs_spatial\",     \"ebird_spatial\", \"ebird_zf\") )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/scan_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check For Existing Files — scan_files","text":"dir.proj project directory, within first level subdirectories may include c(jags, ebird, bbs, spatial) scan.types files scan . Must one c(\"jags\",\"ebird_filtered\", \"bbs_obs\", \"grid\", \"bbs_spatial\", \"ebird_spatial\", \"ebird_zf\"). multiples provided found, returned object named list imported files.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/set_mcmc_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Specifications for MCMC — set_mcmc_specs","title":"Set Specifications for MCMC — set_mcmc_specs","text":"Set Specifications MCMC","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/set_mcmc_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Specifications for MCMC — set_mcmc_specs","text":"","code":"set_mcmc_specs(   na = 1000,   nb = 5000,   nc = 3,   ni = 20000,   nt = 10,   in.parallel = FALSE,   ncores = parallel::detectCores() - 1,   dev.mode = 2 )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/set_mcmc_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Specifications for MCMC — set_mcmc_specs","text":"na number adaptation iterations nb number burn-iterations per chain nc number chains ni number iterations per chain nt thinning rate (every nth iteration removed) .parallel logical TRUE set number chains ('nc') value 1 ncores number cores run model parallel dev.mode integer 1:3. 1=large-ish run; 2=moderate run; 3=quick, short run.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/set_proj_shorthand.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto generate a subdirectory name based on project parameters — set_proj_shorthand","title":"Auto generate a subdirectory name based on project parameters — set_proj_shorthand","text":"Generates shorthand name project based species, country, states, years, grid cell size.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/set_proj_shorthand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auto generate a subdirectory name based on project parameters — set_proj_shorthand","text":"","code":"set_proj_shorthand(species, regions, grid.size, year.range, max.C.ebird = NULL)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/set_proj_shorthand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto generate a subdirectory name based on project parameters — set_proj_shorthand","text":"species string species names using ISO-366-2 regions string countries states grid.size size desired grid cell year.range Vector years. take min max value max.C.ebird optional NULL integer representing max number birds allowed eBird data","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/standardize.html","id":null,"dir":"Reference","previous_headings":"","what":"Center and/or Z-Score Transform a Vector or Array — standardize","title":"Center and/or Z-Score Transform a Vector or Array — standardize","text":"arguments center scale FALSE, function throw error ensure user aware potential mistake.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/standardize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center and/or Z-Score Transform a Vector or Array — standardize","text":"","code":"standardize(x, center = TRUE, scale = TRUE)"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/standardize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center and/or Z-Score Transform a Vector or Array — standardize","text":"x vector 2D array numeric integer values center logical TRUE center resulting object scale logical TRUE data returned z-score transform x.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/trySave.html","id":null,"dir":"Reference","previous_headings":"","what":"Try to Save Results or plot(results) to File — trySave","title":"Try to Save Results or plot(results) to File — trySave","text":"Try Save Results plot(results) File","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/trySave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try to Save Results or plot(results) to File — trySave","text":"","code":"trySave(   x,   name,   savedir = \"/\",   mcmc.specs = NULL,   traceplots = FALSE,   monitors = \"all\" )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/trySave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try to Save Results or plot(results) to File — trySave","text":"x object save file .RDS .PDF name object name (e.g., plots-nimble jags_samples) savedir directory within object attempt save mcmc.specs provided, MCMC specs used save output files traceplots logical TRUE save plots PDF monitors parameters monitored user wishes plot","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/zerofill_ebird.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Zero-filled Data Object for eBird Observations — zerofill_ebird","title":"Create a Zero-filled Data Object for eBird Observations — zerofill_ebird","text":"Creates zero-filled data object comprising eBird observations sampling events data supplied.","code":""},{"path":"https://trashbirdecology.github.io/bbsebird/reference/zerofill_ebird.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Zero-filled Data Object for eBird Observations — zerofill_ebird","text":"","code":"zerofill_ebird(   list,   cols.remove = c(\"SUBSPECIES_COMMON NAME\", \"TAXONOMIC_ORDER\", \"LAST_EDITED_DATE\",     \"CATEGORY\", \"APPROVED\", \"REVIEWED\", \"SPECIES_COMMENTS\", \"...48\", \"HAS_MEDIA\",     \"REASON\", \"TRIP_COMMENTS\") )"},{"path":"https://trashbirdecology.github.io/bbsebird/reference/zerofill_ebird.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Zero-filled Data Object for eBird Observations — zerofill_ebird","text":"list list containing two named data frames, c(\"observations\", \"sampling\"). object result filter_ebird_data(). cols.remove vector column names excluded output file.","code":""}]
